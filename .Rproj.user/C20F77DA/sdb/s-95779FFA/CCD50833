{
    "collab_server" : "",
    "contents" : "setwd(\"E:/ROUTES/Year One Airport Seizure Analysis/Finalized\")\n\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(geosphere)\nlibrary(cobs)\nlibrary(RColorBrewer)\nlibrary(sp)\nlibrary(extrafont)\nlibrary(devtools)\nlibrary(ggalt)\n\n####TOTALS####\n\nmap <- map_data(\"world\")\nmap <- subset(map, region!=\"Antarctica\")\n\ntots <- read.csv(\"tots_map.csv\")\n\nfps <- gcIntermediate(tots[,c('c1long', 'c1lat')], tots[,c('c2long', 'c2lat')], n=100, breakAtDateLine = T, addStartEnd=T, sp = T)\nfps <- as(fps, \"SpatialLinesDataFrame\")\nfps.ff <- fortify(fps)\n\ntots$id <-as.character(c(1:nrow(tots)))\ngcir2 <- merge(fps.ff, tots, all.x=T, by=\"id\")\n\nbubs <- subset(tots, select= c(\"Unique\",\"lat\",\"long\",\"total.sum\"))\nbubs <- data.frame(bubs[complete.cases(bubs),])\n\nwm <- ggplot(data = map, aes(x = long, y = lat, group = group)) +\n  geom_polygon() +\n  geom_map(map = map, aes(map_id = region), \n           color = \"black\", \n           fill = \"gray75\", \n           lwd = .05) + \n  coord_proj(\"+proj=robin\") + ylim(c(-86,86)) + \n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.background = element_rect(fill = \"grey92\"),\n        panel.spacing = unit(0, \"lines\"),\n        plot.margin = unit(c(0,0,0,0),\"lines\"))\n\nwm <- wm + geom_point(data = bubs, aes(size = total.sum, group=1), color = \"purple4\", alpha = .9) + \n  scale_size(breaks = c(30,60,90,114), label = c(\"30\",\"60\",\"90\",\"114\")) +\n  geom_line(data = gcir2, aes(x = long.x, y = lat.x, group = group, alpha = sum), color = \"purple3\", lwd = .7) + \n  scale_alpha_continuous(range = c(0.15, 0.6)) +\n  theme(legend.key.height = unit(0.025, \"in\"),\n        legend.position = c(0.5, 0.15),\n        legend.justification = c(\"center\", \"center\"),\n        legend.box.just = \"center\",\n        legend.direction = \"horizontal\",\n        legend.background = element_rect(color = \"grey20\"),\n        legend.title = element_blank(),\n        legend.text = element_text(family = \"Gill Sans MT\"))\n\npng(file = \"totals_transmap.png\", res=600, width = 10, height = 5, units = \"in\")\n\nwm\n\ndev.off()\n\n\n####IVORY####\n\n\nmap <- map_data(\"world\")\nmap <- subset(map, region!=\"Antarctica\")\n\niv <- read.csv(\"ivory_map.csv\")\niv <- iv[order(rev(iv$count)),]\n\nfps <- gcIntermediate(iv[,c('c1long', 'c1lat')], iv[,c('c2long', 'c2lat')], n=100, breakAtDateLine = T, addStartEnd=T, sp = T)\nfps <- as(fps, \"SpatialLinesDataFrame\")\nfps.ff <- fortify(fps)\n\niv$id <-as.character(c(1:nrow(iv))) # that rts.ff$id is a char\ngcir <- merge(fps.ff, iv, all.x=T, by=\"id\")\n\nnew_data <- gcir[gcir$count > 1,]\n\nnew_lines_data <- NULL\ngroups <- unique(new_data$group)\n\nfor(i in 1:length(groups)){\n  group <- groups[i]\n  data <- new_data[new_data$group == group,]\n  count <- max(data$count)\n  second_data <- NULL\n  for(j in 1:count){\n    if(j==1){\n      next\n    }\n    \n    data_2 <- data\n    \n    df <- data.frame(long=data_2$long,lat=data_2$lat)\n    \n    ## first get new latitute line\n    df$lat[nrow(df)/2] <- df$lat[nrow(df)/2] + j\n    \n    ## create the contraints\n    start <- c(0, head(df$long,1) ,head(df$lat,1))\n    mid <- c(0, df$long[nrow(df)/2], df$lat[nrow(df)/2])\n    end <- c(0, tail(df$long,1), tail(df$lat,1))\n    cons <- rbind(start,mid,end)\n    knots <- c(head(df$long,1),df$long[nrow(df)/2],tail(df$long,1))\n    \n    ## make like with contrained b-spline\n    cob_lat <- cobs(df$long,df$lat,knots=knots,pointwise=cons)\n    \n    ## this will be the new curved latitute line\n    lat_fit <- cob_lat$fitted\n    \n    data_2$lat <- lat_fit\n    \n    data_2$group <- paste(group,\".\",j,sep=\"\") \n    \n    second_data <- rbind(second_data,data_2)\n  }\n  inter_data <- rbind(data,second_data)\n  new_lines_data <- rbind(new_lines_data, inter_data)\n}\n\ngcir2 <- gcir[gcir$count == 1,]\ngcir2 <- rbind(gcir2, new_lines_data)\n\nbubs <- subset(iv, select = c(Unique, ulat, ulong, sum))\nbubs <- data.frame(bubs[complete.cases(bubs),])\n\n\nwm <- ggplot(data = map, aes(x = long, y = lat, group = group)) +\n  geom_polygon() +\n  geom_map(map = map, aes(map_id = region), \n           color = \"black\", \n           fill = \"gray75\", \n           lwd = .05) + \n  coord_proj(\"+proj=robin\") + ylim(c(-86,86)) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.background = element_rect(fill = \"grey92\"),\n        panel.spacing = unit(0, \"lines\"),\n        plot.margin = unit(c(0,0,0,0),\"lines\"))\n\nwm <- wm + geom_point(data = bubs, aes(x = ulong, y = ulat, size = sum), color = \"darkorange\", alpha = .9) + \n  scale_size(breaks = c(25,50,79), label = c(\"25\",\"50\",\"79\")) +\n  geom_line(data = gcir2, aes(color = order, group = group), lwd = .7, alpha = .3) + \n  scale_color_distiller(palette = 'Oranges', direction = 1, guide = \"colorbar\", name = \"Flight\\nPath\", \n                        breaks = c(10,80), label = c(\"Origin\" , \"Destination\")) +\n  theme(legend.key.height = unit(0.025, \"in\"),\n        legend.position = c(0.5, 0.15),\n        legend.justification = c(\"center\", \"center\"),\n        legend.box.just = \"center\",\n        legend.direction = \"horizontal\",\n        legend.background = element_rect(color = \"grey20\"),\n        legend.title = element_blank(),\n        legend.text = element_text(family = \"Gill Sans MT\"))\n\npng(file = \"ivory_transmap.png\", res=600, width = 10, height = 5, units = \"in\")\n\nwm\n\ndev.off()\n\n\n####RHINO HORN####\n\n\nmap <- map_data(\"world\")\nmap <- subset(map, region!=\"Antarctica\")\n\nRhino <- read.csv(\"rh_map.csv\")\nRhino <- Rhino[order(Rhino$count),]\n\nfps <- gcIntermediate(Rhino[,c('c1long', 'c1lat')], Rhino[,c('c2long', 'c2lat')], n=100, breakAtDateLine = T, addStartEnd=T, sp = T)\nfps <- as(fps, \"SpatialLinesDataFrame\")\nfps.ff <- fortify(fps)\n\nRhino$id <-as.character(c(1:nrow(Rhino))) # that rts.ff$id is a char\ngcir <- merge(fps.ff, Rhino, all.x=T, by=\"id\") # join attributes, we keep them all, just in case\n\n## make more lines for count > 1 \n\nnew_data <- gcir[gcir$count > 1,]\n\nnew_lines_data <- NULL\ngroups <- unique(new_data$group)\n\nfor(i in 1:length(groups)){\n  group <- groups[i]\n  data <- new_data[new_data$group == group,]\n  count <- max(data$count)\n  second_data <- NULL\n  for(j in 1:count){\n    if(j==1){\n      next\n    }\n    \n    data_2 <- data\n    \n    df <- data.frame(long=data_2$long,lat=data_2$lat)\n    \n    ## first get new latitute line\n    df$lat[nrow(df)/2] <- df$lat[nrow(df)/2] + j\n    \n    ## create the contraints\n    start <- c(0, head(df$long,1) ,head(df$lat,1))\n    mid <- c(0, df$long[nrow(df)/2], df$lat[nrow(df)/2])\n    end <- c(0, tail(df$long,1), tail(df$lat,1))\n    cons <- rbind(start,mid,end)\n    knots <- c(head(df$long,1),df$long[nrow(df)/2],tail(df$long,1))\n    \n    ## make like with contrained b-spline\n    cob_lat <- cobs(df$long,df$lat,knots=knots,pointwise=cons)\n    \n    ##plot(cob_lat)\n    \n    ## this will be the new curved latitute line\n    lat_fit <- cob_lat$fitted\n    \n    data_2$lat <- lat_fit\n    \n    data_2$group <- paste(group,\".\",j,sep=\"\") \n    \n    second_data <- rbind(second_data,data_2)\n  }\n  inter_data <- rbind(data,second_data)\n  new_lines_data <- rbind(new_lines_data, inter_data)\n}\n\ngcir2 <- gcir[gcir$count == 1,]\ngcir2 <- rbind(gcir2, new_lines_data)\n\nbubs <- subset(Rhino, select = c(Unique, ulat, ulong, sum))\nbubs <- data.frame(bubs[complete.cases(bubs),])\n\n\nwm <- ggplot(data = map, aes(x = long, y = lat, group = group)) +\n  geom_polygon() +\n  geom_map(map = map, aes(map_id = region), \n           color = \"black\", \n           fill = \"gray75\", \n           lwd = .05) + \n  coord_proj(\"+proj=robin\") + ylim(c(-86,86)) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.background = element_rect(fill = \"grey92\"),\n        panel.spacing = unit(0, \"lines\"),\n        plot.margin = unit(c(0,0,0,0),\"lines\"))\n\nwm <- wm + geom_point(data = bubs, aes(x = ulong, y = ulat, size = sum), color = \"Red\", alpha = .9) + \n  scale_size(breaks = c(1,6,11,16), label = c(\"1\",\"6\",\"11\",\"16\")) +\n  geom_line(data = gcir2, aes(color = order, group = group), lwd = .7, alpha = .4) + \n  scale_color_distiller(palette = 'Reds', direction = 1, guide = \"colorbar\", name = \"Flight\\nPath\", \n                        breaks = c(10,80), label = c(\"Origin\" , \"Destination\")) +\ntheme(legend.key.height = unit(0.025, \"in\"),\n      legend.position = c(0.5, 0.15),\n      legend.justification = c(\"center\", \"center\"),\n      legend.box.just = \"center\",\n      legend.direction = \"horizontal\",\n      legend.background = element_rect(color = \"grey20\"),\n      legend.title = element_blank(),\n      legend.text = element_text(family = \"Gill Sans MT\"))\n\npng(file = \"rhinohorn_transmap.png\", res=600, width = 10, height = 5, units = \"in\")\n\nwm\n\ndev.off()\n\n\n####REPTILES####\n\nmap <- map_data(\"world\")\nmap <- subset(map, region!=\"Antarctica\")\n\nrep <- read.csv(\"rep_map.csv\")\nrep <- rep[order(rep$count),]\n\nfps <- gcIntermediate(rep[,c('c1long', 'c1lat')], rep[,c('c2long', 'c2lat')], n=100, breakAtDateLine = T, addStartEnd=T, sp = T)\nfps <- as(fps, \"SpatialLinesDataFrame\")\nfps.ff <- fortify(fps)\n\nrep$id <-as.character(c(1:nrow(rep))) # that rts.ff$id is a char\ngcir <- merge(fps.ff, rep, all.x=T, by=\"id\") # join attributes, we keep them all, just in case\n\n## make more lines for count > 1 \n\nnew_data <- gcir[gcir$count > 1,]\n\nnew_lines_data <- NULL\ngroups <- unique(new_data$group)\n\nfor(i in 1:length(groups)){\n  group <- groups[i]\n  data <- new_data[new_data$group == group,]\n  count <- max(data$count)\n  second_data <- NULL\n  for(j in 1:count){\n    if(j==1){\n      next\n    }\n    \n    data_2 <- data\n    \n    df <- data.frame(long=data_2$long,lat=data_2$lat)\n    \n    ## first get new latitute line\n    df$lat[nrow(df)/2] <- df$lat[nrow(df)/2] + j\n    \n    ## create the contraints\n    start <- c(0, head(df$long,1) ,head(df$lat,1))\n    mid <- c(0, df$long[nrow(df)/2], df$lat[nrow(df)/2])\n    end <- c(0, tail(df$long,1), tail(df$lat,1))\n    cons <- rbind(start,mid,end)\n    knots <- c(head(df$long,1),df$long[nrow(df)/2],tail(df$long,1))\n    \n    ## make like with contrained b-spline\n    cob_lat <- cobs(df$long,df$lat,knots=knots,pointwise=cons)\n    \n    ##plot(cob_lat)\n    \n    ## this will be the new curved latitute line\n    lat_fit <- cob_lat$fitted\n    \n    data_2$lat <- lat_fit\n    \n    data_2$group <- paste(group,\".\",j,sep=\"\") \n    \n    second_data <- rbind(second_data,data_2)\n  }\n  inter_data <- rbind(data,second_data)\n  new_lines_data <- rbind(new_lines_data, inter_data)\n}\n\ngcir2 <- gcir[gcir$count == 1,]\ngcir2 <- rbind(gcir2, new_lines_data)\n\nbubs <- subset(rep, select = c(Unique, ulat, ulong, sum))\nbubs <- data.frame(bubs[complete.cases(bubs),])\n\nwm <- ggplot(data = map, aes(x = long, y = lat, group = group)) +\n  geom_polygon() +\n  geom_map(map = map, aes(map_id = region), \n           color = \"black\", \n           fill = \"gray75\", \n           lwd = .05) + \n  coord_proj(\"+proj=robin\") + ylim(c(-86,86)) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.background = element_rect(fill = \"grey92\"),\n        panel.spacing = unit(0, \"lines\"),\n        plot.margin = unit(c(0,0,0,0),\"lines\"))\n\nwm <- wm + geom_point(data = bubs, aes(x = ulong, y = ulat, size = sum), color = \"green4\", alpha = .9) + \n  scale_size(breaks = c(1,25,54), label = c(\"1\",\"25\",\"54\")) +\n  geom_line(data = gcir2, aes(color = order, group = group), lwd = .7, alpha = .4) + \n  scale_color_distiller(palette = 'Greens', direction = 1, guide = \"colorbar\", name = \"Flight\\nPath\", \n                        breaks = c(10,80), label = c(\"Origin\" , \"Destination\")) +\ntheme(legend.key.height = unit(0.025, \"in\"),\n      legend.position = c(0.5, 0.15),\n      legend.justification = c(\"center\", \"center\"),\n      legend.box.just = \"center\",\n      legend.direction = \"horizontal\",\n      legend.background = element_rect(color = \"grey20\"),\n      legend.title = element_blank(),\n      legend.text = element_text(family = \"Gill Sans MT\"))\n\npng(file = \"reptile_transmap.png\", res=600, width = 10, height = 5, units = \"in\")\n\nwm\n\ndev.off()\n\n\n####BIRDS####\n\n\nmap <- map_data(\"world\")\nmap <- subset(map, region!=\"Antarctica\")\n\nbird <- read.csv(\"bird_map.csv\")\nbird <- bird[order(bird$count),]\n\nfps <- gcIntermediate(bird[,c('c1long', 'c1lat')], bird[,c('c2long', 'c2lat')], n=100, breakAtDateLine = T, addStartEnd=T, sp = T)\nfps <- as(fps, \"SpatialLinesDataFrame\")\nfps.ff <- fortify(fps)\n\nbird$id <-as.character(c(1:nrow(bird))) # that rts.ff$id is a char\ngcir <- merge(fps.ff, bird, all.x=T, by=\"id\") # join attributes, we keep them all, just in case\n\n## make more lines for count > 1 \n\nnew_data <- gcir[gcir$count > 1,]\n\nnew_lines_data <- NULL\ngroups <- unique(new_data$group)\n\nfor(i in 1:length(groups)){\n  group <- groups[i]\n  data <- new_data[new_data$group == group,]\n  count <- max(data$count)\n  second_data <- NULL\n  for(j in 1:count){\n    if(j==1){\n      next\n    }\n    \n    data_2 <- data\n    \n    df <- data.frame(long=data_2$long,lat=data_2$lat)\n    \n    ## first get new latitute line\n    df$lat[nrow(df)/2] <- df$lat[nrow(df)/2] + j\n    \n    ## create the contraints\n    start <- c(0, head(df$long,1) ,head(df$lat,1))\n    mid <- c(0, df$long[nrow(df)/2], df$lat[nrow(df)/2])\n    end <- c(0, tail(df$long,1), tail(df$lat,1))\n    cons <- rbind(start,mid,end)\n    knots <- c(head(df$long,1),df$long[nrow(df)/2],tail(df$long,1))\n    \n    ## make like with contrained b-spline\n    cob_lat <- cobs(df$long,df$lat,knots=knots,pointwise=cons)\n    \n    ##plot(cob_lat)\n    \n    ## this will be the new curved latitute line\n    lat_fit <- cob_lat$fitted\n    \n    data_2$lat <- lat_fit\n    \n    data_2$group <- paste(group,\".\",j,sep=\"\") \n    \n    second_data <- rbind(second_data,data_2)\n  }\n  inter_data <- rbind(data,second_data)\n  new_lines_data <- rbind(new_lines_data, inter_data)\n}\n\ngcir2 <- gcir[gcir$count == 1,]\ngcir2 <- rbind(gcir2, new_lines_data)\ngcir2 <- transform(gcir2, group = reorder(group, count))\n\nbubs <- subset(bird, select = c(Unique, ulat, ulong, sum))\nbubs <- data.frame(bubs[complete.cases(bubs),])\n\nwm <- ggplot(data = map, aes(x = long, y = lat, group = group)) +\n  geom_polygon() +\n  geom_map(map = map, aes(map_id = region), \n           color = \"black\", \n           fill = \"gray75\", \n           lwd = .05) + \n  coord_proj(\"+proj=robin\") + ylim(c(-86,86)) +\n  theme(axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.background = element_rect(fill = \"grey92\"),\n        panel.spacing = unit(0, \"lines\"),\n        plot.margin = unit(c(0,0,0,0),\"lines\"))\n\nwm <- wm + geom_point(data = bubs, aes(x = ulong, y = ulat, size = sum), color = \"steelblue3\", alpha = .9) + \n  scale_size(breaks = c(1,10,21), label = c(\"1\",\"10\",\"21\")) +\n  geom_line(data = gcir2, aes(color = order, group = group), lwd = .7, alpha = .4) + \n  scale_color_distiller(palette = 'Blues', direction = 1, guide = \"colorbar\", name = \"Flight\\nPath\", \n                        breaks = c(10,80), label = c(\"Origin\" , \"Destination\")) +\ntheme(legend.key.height = unit(0.025, \"in\"),\n      legend.position = c(0.5, 0.15),\n      legend.justification = c(\"center\", \"center\"),\n      legend.box.just = \"center\",\n      legend.direction = \"horizontal\",\n      legend.background = element_rect(color = \"grey20\"),\n      legend.title = element_blank(),\n      legend.text = element_text(family = \"Gill Sans MT\"))\n\npng(file = \"bird_transmap.png\", res=600, width = 10, height = 5, units = \"in\")\n\nwm\n\ndev.off()",
    "created" : 1487867181538.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1154574352",
    "id" : "CCD50833",
    "lastKnownWriteTime" : 1487948046,
    "last_content_update" : 1487948046387,
    "path" : "E:/ROUTES/Year One Airport Seizure Analysis/Finalized/up_transmap.R",
    "project_path" : "up_transmap.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}